// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/order/item/v1/item.proto

package item

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _item_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on GetItemRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *GetItemRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for OrderId

	return nil
}

// GetItemRequestValidationError is the validation error returned by
// GetItemRequest.Validate if the designated constraints aren't met.
type GetItemRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetItemRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetItemRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetItemRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetItemRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetItemRequestValidationError) ErrorName() string { return "GetItemRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetItemRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetItemRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetItemRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetItemRequestValidationError{}

// Validate checks the field values on GetItemResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetItemResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetItem()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetItemResponseValidationError{
				field:  "Item",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetItemResponseValidationError is the validation error returned by
// GetItemResponse.Validate if the designated constraints aren't met.
type GetItemResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetItemResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetItemResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetItemResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetItemResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetItemResponseValidationError) ErrorName() string { return "GetItemResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetItemResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetItemResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetItemResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetItemResponseValidationError{}

// Validate checks the field values on ListItemsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ListItemsRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for OrderId

	if m.GetPagination() == nil {
		return ListItemsRequestValidationError{
			field:  "Pagination",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListItemsRequestValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ListItemsRequestValidationError is the validation error returned by
// ListItemsRequest.Validate if the designated constraints aren't met.
type ListItemsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListItemsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListItemsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListItemsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListItemsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListItemsRequestValidationError) ErrorName() string { return "ListItemsRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListItemsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListItemsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListItemsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListItemsRequestValidationError{}

// Validate checks the field values on ListItemsResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ListItemsResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetItems()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListItemsResponseValidationError{
				field:  "Items",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ListItemsResponseValidationError is the validation error returned by
// ListItemsResponse.Validate if the designated constraints aren't met.
type ListItemsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListItemsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListItemsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListItemsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListItemsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListItemsResponseValidationError) ErrorName() string {
	return "ListItemsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListItemsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListItemsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListItemsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListItemsResponseValidationError{}

// Validate checks the field values on CreatItemRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *CreatItemRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for OrderId

	if v, ok := interface{}(m.GetItem()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreatItemRequestValidationError{
				field:  "Item",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreatItemRequestValidationError is the validation error returned by
// CreatItemRequest.Validate if the designated constraints aren't met.
type CreatItemRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatItemRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatItemRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatItemRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatItemRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatItemRequestValidationError) ErrorName() string { return "CreatItemRequestValidationError" }

// Error satisfies the builtin error interface
func (e CreatItemRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatItemRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatItemRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatItemRequestValidationError{}

// Validate checks the field values on CreatItemResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *CreatItemResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// CreatItemResponseValidationError is the validation error returned by
// CreatItemResponse.Validate if the designated constraints aren't met.
type CreatItemResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatItemResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatItemResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatItemResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatItemResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatItemResponseValidationError) ErrorName() string {
	return "CreatItemResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreatItemResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatItemResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatItemResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatItemResponseValidationError{}

// Validate checks the field values on UpdateItemRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *UpdateItemRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for OrderId

	if v, ok := interface{}(m.GetItem()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateItemRequestValidationError{
				field:  "Item",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateItemRequestValidationError is the validation error returned by
// UpdateItemRequest.Validate if the designated constraints aren't met.
type UpdateItemRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateItemRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateItemRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateItemRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateItemRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateItemRequestValidationError) ErrorName() string {
	return "UpdateItemRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateItemRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateItemRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateItemRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateItemRequestValidationError{}

// Validate checks the field values on UpdateItemResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateItemResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Updated

	return nil
}

// UpdateItemResponseValidationError is the validation error returned by
// UpdateItemResponse.Validate if the designated constraints aren't met.
type UpdateItemResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateItemResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateItemResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateItemResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateItemResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateItemResponseValidationError) ErrorName() string {
	return "UpdateItemResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateItemResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateItemResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateItemResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateItemResponseValidationError{}

// Validate checks the field values on DeleteItemRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *DeleteItemRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for OrderId

	return nil
}

// DeleteItemRequestValidationError is the validation error returned by
// DeleteItemRequest.Validate if the designated constraints aren't met.
type DeleteItemRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteItemRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteItemRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteItemRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteItemRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteItemRequestValidationError) ErrorName() string {
	return "DeleteItemRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteItemRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteItemRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteItemRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteItemRequestValidationError{}

// Validate checks the field values on DeleteItemResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteItemResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Deleted

	return nil
}

// DeleteItemResponseValidationError is the validation error returned by
// DeleteItemResponse.Validate if the designated constraints aren't met.
type DeleteItemResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteItemResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteItemResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteItemResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteItemResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteItemResponseValidationError) ErrorName() string {
	return "DeleteItemResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteItemResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteItemResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteItemResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteItemResponseValidationError{}
