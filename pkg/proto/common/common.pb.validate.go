// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: pkg/proto/common/common.proto

package common

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _common_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on PaginationParam with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *PaginationParam) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Pagination

	// no validation rules for CountOnly

	if m.GetPage() < 1 {
		return PaginationParamValidationError{
			field:  "Page",
			reason: "value must be greater than or equal to 1",
		}
	}

	if m.GetPageSize() > 10000 {
		return PaginationParamValidationError{
			field:  "PageSize",
			reason: "value must be less than or equal to 10000",
		}
	}

	// no validation rules for Cursor

	return nil
}

// PaginationParamValidationError is the validation error returned by
// PaginationParam.Validate if the designated constraints aren't met.
type PaginationParamValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PaginationParamValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PaginationParamValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PaginationParamValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PaginationParamValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PaginationParamValidationError) ErrorName() string { return "PaginationParamValidationError" }

// Error satisfies the builtin error interface
func (e PaginationParamValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPaginationParam.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PaginationParamValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PaginationParamValidationError{}

// Validate checks the field values on PaginationResult with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *PaginationResult) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetTotal() < 0 {
		return PaginationResultValidationError{
			field:  "Total",
			reason: "value must be greater than or equal to 0",
		}
	}

	if m.GetPage() < 1 {
		return PaginationResultValidationError{
			field:  "Page",
			reason: "value must be greater than or equal to 1",
		}
	}

	if m.GetPageSize() > 10000 {
		return PaginationResultValidationError{
			field:  "PageSize",
			reason: "value must be less than or equal to 10000",
		}
	}

	// no validation rules for Cursor

	return nil
}

// PaginationResultValidationError is the validation error returned by
// PaginationResult.Validate if the designated constraints aren't met.
type PaginationResultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PaginationResultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PaginationResultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PaginationResultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PaginationResultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PaginationResultValidationError) ErrorName() string { return "PaginationResultValidationError" }

// Error satisfies the builtin error interface
func (e PaginationResultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPaginationResult.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PaginationResultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PaginationResultValidationError{}

// Validate checks the field values on StatusResult with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *StatusResult) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Status

	return nil
}

// StatusResultValidationError is the validation error returned by
// StatusResult.Validate if the designated constraints aren't met.
type StatusResultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StatusResultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StatusResultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StatusResultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StatusResultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StatusResultValidationError) ErrorName() string { return "StatusResultValidationError" }

// Error satisfies the builtin error interface
func (e StatusResultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStatusResult.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StatusResultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StatusResultValidationError{}

// Validate checks the field values on IDResult with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *IDResult) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// IDResultValidationError is the validation error returned by
// IDResult.Validate if the designated constraints aren't met.
type IDResultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IDResultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IDResultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IDResultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IDResultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IDResultValidationError) ErrorName() string { return "IDResultValidationError" }

// Error satisfies the builtin error interface
func (e IDResultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIDResult.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IDResultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IDResultValidationError{}

// Validate checks the field values on ErrorItem with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *ErrorItem) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	return nil
}

// ErrorItemValidationError is the validation error returned by
// ErrorItem.Validate if the designated constraints aren't met.
type ErrorItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ErrorItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ErrorItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ErrorItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ErrorItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ErrorItemValidationError) ErrorName() string { return "ErrorItemValidationError" }

// Error satisfies the builtin error interface
func (e ErrorItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sErrorItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ErrorItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ErrorItemValidationError{}

// Validate checks the field values on ErrorResult with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ErrorResult) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ErrorResultValidationError{
				field:  "Error",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ErrorResultValidationError is the validation error returned by
// ErrorResult.Validate if the designated constraints aren't met.
type ErrorResultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ErrorResultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ErrorResultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ErrorResultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ErrorResultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ErrorResultValidationError) ErrorName() string { return "ErrorResultValidationError" }

// Error satisfies the builtin error interface
func (e ErrorResultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sErrorResult.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ErrorResultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ErrorResultValidationError{}

// Validate checks the field values on OrderByField with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *OrderByField) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Key

	// no validation rules for Direction

	return nil
}

// OrderByFieldValidationError is the validation error returned by
// OrderByField.Validate if the designated constraints aren't met.
type OrderByFieldValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrderByFieldValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrderByFieldValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrderByFieldValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrderByFieldValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrderByFieldValidationError) ErrorName() string { return "OrderByFieldValidationError" }

// Error satisfies the builtin error interface
func (e OrderByFieldValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrderByField.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrderByFieldValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrderByFieldValidationError{}

// Validate checks the field values on QueryOptions with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *QueryOptions) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetOrderByFields() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QueryOptionsValidationError{
					field:  fmt.Sprintf("OrderByFields[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// QueryOptionsValidationError is the validation error returned by
// QueryOptions.Validate if the designated constraints aren't met.
type QueryOptionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryOptionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryOptionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryOptionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryOptionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryOptionsValidationError) ErrorName() string { return "QueryOptionsValidationError" }

// Error satisfies the builtin error interface
func (e QueryOptionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryOptions.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryOptionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryOptionsValidationError{}
